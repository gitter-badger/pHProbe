<h1 id="summary">Summary</h1>

<table><thead>
<tr>
<th>Members</th>
<th>Descriptions</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a9f6186ddc7b0a1b35496ef5b8d792a35"><code class="prettyprint">PH_PROBE</code></a></td>
<td>pH probe I2C address</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1aeef6f757defebc47e82eb7c75b27f566"><code class="prettyprint">PH_MEASURE_PH</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a172eb26c990f17c499b4c4e43df0cc50"><code class="prettyprint">PH_MEASURE_TEMP</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1acad5e22676ac13f2cf5935adcd74629b"><code class="prettyprint">PH_CALIBRATE_ZERO</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a22724b70cae2f7c60a3a22c57551f2d0"><code class="prettyprint">PH_CALIBRATE_LOW</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a53d29d0bdbc9a58bb3dc3586ab407930"><code class="prettyprint">PH_CALIBRATE_HIGH</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1abb5c1392d462fa95ea961af3c702804c"><code class="prettyprint">PH_VERSION_REGISTER</code></a></td>
<td>version</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a644f2389e3fc33e73dda8428ee857290"><code class="prettyprint">PH_PH_REGISTER</code></a></td>
<td>pH</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a37ef0b1aa88c0ed349fb96fb5cc1c194"><code class="prettyprint">PH_TEMP_REGISTER</code></a></td>
<td>temperature in C</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a0b0bb4a74a9843a87dc08af7e82d5944"><code class="prettyprint">PH_CALIBRATE_ZERO_REGISTER</code></a></td>
<td>zero offset</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a8bbc2c28aead8362a6bbb2b2c6e2664e"><code class="prettyprint">PH_CALIBRATE_REFHIGH_REGISTER</code></a></td>
<td>reference high calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a55a9d429aec16a9bcee319135d1cc345"><code class="prettyprint">PH_CALIBRATE_REFLOW_REGISTER</code></a></td>
<td>reference low calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a5dac8d277e4c347bba9d74eff2e1d797"><code class="prettyprint">PH_CALIBRATE_READHIGH_REGISTER</code></a></td>
<td>reading high calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1af35e3b7f05c735e36b531c2d720a628d"><code class="prettyprint">PH_CALIBRATE_READLOW_REGISTER</code></a></td>
<td>reading low calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a08ac8ae286d3f87d0b40c6e870f6d721"><code class="prettyprint">PH_SOLUTION_REGISTER</code></a></td>
<td>reference pH solution</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a49802d77e8dc253cf76cf992fe655f59"><code class="prettyprint">PH_TEMP_COMPENSATION_REGISTER</code></a></td>
<td>temperature compensation constant</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1aaa55fc29c8386cbdf97896b8be0de3fb"><code class="prettyprint">PH_CONFIG_REGISTER</code></a></td>
<td>config register</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a2771e5db40a167569de5b0ed79d3ba65"><code class="prettyprint">PH_TASK_REGISTER</code></a></td>
<td>task register</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1ac002bb318de925525ed1e572b7a3982d"><code class="prettyprint">PH_TEMP_MEASURE_TIME</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a3192def5860d52a2371e839240341c07"><code class="prettyprint">PH_PH_MEASURE_TIME</code></a></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a816b4c13020da4b424b3c970b4345b78"><code class="prettyprint">PH_DUALPOINT_CONFIG_BIT</code></a></td>
<td>dual point config bit</td>
</tr>
<tr>
<td><code class="prettyprint">define</code><a href="#p_h_probe_8h_1abc306eb156d09757f611b61143f5f2cf"><code class="prettyprint">PH_TEMP_COMPENSATION_CONFIG_BIT</code></a></td>
<td>temperature compensation config bit</td>
</tr>
<tr>
<td><code class="prettyprint">class</code><a href="#classp_h___probe"><code class="prettyprint">pH_Probe</code></a></td>
<td>pH Class</td>
</tr>
</tbody></table>

<h2 id="members">Members</h2>

<h4 id="defineph_probe"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a9f6186ddc7b0a1b35496ef5b8d792a35"><code class="prettyprint">PH_PROBE</code></a></h4>

<p>pH probe I2C address</p>

<h4 id="defineph_measure_ph"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1aeef6f757defebc47e82eb7c75b27f566"><code class="prettyprint">PH_MEASURE_PH</code></a></h4>

<h4 id="defineph_measure_temp"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a172eb26c990f17c499b4c4e43df0cc50"><code class="prettyprint">PH_MEASURE_TEMP</code></a></h4>

<h4 id="defineph_calibrate_zero"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1acad5e22676ac13f2cf5935adcd74629b"><code class="prettyprint">PH_CALIBRATE_ZERO</code></a></h4>

<h4 id="defineph_calibrate_low"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a22724b70cae2f7c60a3a22c57551f2d0"><code class="prettyprint">PH_CALIBRATE_LOW</code></a></h4>

<h4 id="defineph_calibrate_high"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a53d29d0bdbc9a58bb3dc3586ab407930"><code class="prettyprint">PH_CALIBRATE_HIGH</code></a></h4>

<h4 id="defineph_version_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1abb5c1392d462fa95ea961af3c702804c"><code class="prettyprint">PH_VERSION_REGISTER</code></a></h4>

<p>version</p>

<h4 id="defineph_ph_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a644f2389e3fc33e73dda8428ee857290"><code class="prettyprint">PH_PH_REGISTER</code></a></h4>

<p>pH</p>

<h4 id="defineph_temp_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a37ef0b1aa88c0ed349fb96fb5cc1c194"><code class="prettyprint">PH_TEMP_REGISTER</code></a></h4>

<p>temperature in C</p>

<h4 id="defineph_calibrate_zero_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a0b0bb4a74a9843a87dc08af7e82d5944"><code class="prettyprint">PH_CALIBRATE_ZERO_REGISTER</code></a></h4>

<p>zero offset</p>

<h4 id="defineph_calibrate_refhigh_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a8bbc2c28aead8362a6bbb2b2c6e2664e"><code class="prettyprint">PH_CALIBRATE_REFHIGH_REGISTER</code></a></h4>

<p>reference high calibration</p>

<h4 id="defineph_calibrate_reflow_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a55a9d429aec16a9bcee319135d1cc345"><code class="prettyprint">PH_CALIBRATE_REFLOW_REGISTER</code></a></h4>

<p>reference low calibration</p>

<h4 id="defineph_calibrate_readhigh_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a5dac8d277e4c347bba9d74eff2e1d797"><code class="prettyprint">PH_CALIBRATE_READHIGH_REGISTER</code></a></h4>

<p>reading high calibration</p>

<h4 id="defineph_calibrate_readlow_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1af35e3b7f05c735e36b531c2d720a628d"><code class="prettyprint">PH_CALIBRATE_READLOW_REGISTER</code></a></h4>

<p>reading low calibration</p>

<h4 id="defineph_solution_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a08ac8ae286d3f87d0b40c6e870f6d721"><code class="prettyprint">PH_SOLUTION_REGISTER</code></a></h4>

<p>reference pH solution</p>

<h4 id="defineph_temp_compensation_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a49802d77e8dc253cf76cf992fe655f59"><code class="prettyprint">PH_TEMP_COMPENSATION_REGISTER</code></a></h4>

<p>temperature compensation constant</p>

<h4 id="defineph_config_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1aaa55fc29c8386cbdf97896b8be0de3fb"><code class="prettyprint">PH_CONFIG_REGISTER</code></a></h4>

<p>config register</p>

<h4 id="defineph_task_register"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a2771e5db40a167569de5b0ed79d3ba65"><code class="prettyprint">PH_TASK_REGISTER</code></a></h4>

<p>task register</p>

<h4 id="defineph_temp_measure_time"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1ac002bb318de925525ed1e572b7a3982d"><code class="prettyprint">PH_TEMP_MEASURE_TIME</code></a></h4>

<h4 id="defineph_ph_measure_time"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a3192def5860d52a2371e839240341c07"><code class="prettyprint">PH_PH_MEASURE_TIME</code></a></h4>

<h4 id="defineph_dualpoint_config_bit"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1a816b4c13020da4b424b3c970b4345b78"><code class="prettyprint">PH_DUALPOINT_CONFIG_BIT</code></a></h4>

<p>dual point config bit</p>

<h4 id="defineph_temp_compensation_config_bit"><code class="prettyprint">define</code><a href="#p_h_probe_8h_1abc306eb156d09757f611b61143f5f2cf"><code class="prettyprint">PH_TEMP_COMPENSATION_CONFIG_BIT</code></a></h4>

<p>temperature compensation config bit</p>

<h1 id="class-ph_probe">class <code class="prettyprint">pH_Probe</code></h1>

<h2 id="members">Members</h2>

<h2 id="ph">pH</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1a10358a816d7a925b1458d8f9dd6d1c94"><code class="prettyprint">pH</code></a>
</br></p>

<p>pH</p>

<h2 id="tempc">tempC</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1a70c5322b3cd4eed11624f18251514579"><code class="prettyprint">tempC</code></a>
</br></p>

<p>Temperature in C</p>

<h2 id="tempf">tempF</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1a8093e952ecd2c2f2b1f985d5524216ea"><code class="prettyprint">tempF</code></a>
</br></p>

<p>Temperature in F</p>

<h2 id="ph_probe">pH_Probe</h2>

<p><code class="prettyprint">public</code><a href="#classp_h___probe_1a64977a4dcae0cdb4fedeaf781e51eb41"><code class="prettyprint">pH_Probe</code></a><code class="prettyprint">()</code>
</br></p>

<p>Class constructor.</p>

<h2 id="ph_probe">~pH_Probe</h2>

<p><code class="prettyprint">public</code><a href="#classp_h___probe_1a0bf77341b7882e902261bd84e582ec34"><code class="prettyprint">~pH_Probe</code></a><code class="prettyprint">()</code>
</br></p>

<p>Class destructor.</p>

<h2 id="measureph">measurepH</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1afe2eb173e53473312d7b7c9b494c098a"><code class="prettyprint">measurepH</code></a><code class="prettyprint">()</code>
</br></p>

<p>Starts a pH measurement.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">measurepH</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: pH</p>

<h2 id="measuretemp">measureTemp</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1a0cce81403f3243ad21ba2d0b4cfec022"><code class="prettyprint">measureTemp</code></a><code class="prettyprint">()</code>
</br></p>

<p>Starts a temperature measurement.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">measureTemp</span><span class="p">();</span>
</code></pre>
<p><a href="#classp_h___probe_1a70c5322b3cd4eed11624f18251514579">tempC</a> and <a href="#classp_h___probe_1a8093e952ecd2c2f2b1f985d5524216ea">tempF</a> are updated </p>

<p>A value of -127 means the device is not connected. </p>

<p><strong>Returns</strong>: temperature in C</p>

<h2 id="calibratezero">calibrateZero</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1ac52e5c811c66e57bbec54bb51ac85054"><code class="prettyprint">calibrateZero</code></a><code class="prettyprint">()</code>
</br></p>

<p>Determines zero-point of the pH probe.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">calibrateZero</span><span class="p">();</span>
</code></pre>
<p>result will be saved in the device&rsquo;s EEPROM and used automatically thereafter</p>

<h2 id="calibrateprobelow">calibrateProbeLow</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1ac634b773a0a0e2ebe466f547fc477c82"><code class="prettyprint">calibrateProbeLow</code></a><code class="prettyprint">(float solutionpH)</code>
</br></p>

<p>Calibrates the dual-point values for the low reading and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">calibrateProbeLow</span><span class="p">(</span><span class="mf">4.0</span><span class="p">);</span>
</code></pre>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">solutionpH</code></td>
<td>the pH of the calibration solution</td>
</tr>
</tbody></table>

<h2 id="calibrateprobehigh">calibrateProbeHigh</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1a90dae1e3a98ab93a73c3e329458f9683"><code class="prettyprint">calibrateProbeHigh</code></a><code class="prettyprint">(float solutionpH)</code>
</br></p>

<p>Calibrates the dual-point values for the high reading and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">calibrateProbeHigh</span><span class="p">(</span><span class="mf">7.0</span><span class="p">);</span>
</code></pre>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">solutionpH</code></td>
<td>the pH of the calibration solution</td>
</tr>
</tbody></table>

<h2 id="setdualpointcalibration">setDualPointCalibration</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1ac77caee3ef22840a9a84b5e29501c5ff"><code class="prettyprint">setDualPointCalibration</code></a><code class="prettyprint">(float refLow,float refHigh,float readLow,float readHigh)</code>
</br></p>

<p>Sets all the values for dual point calibration and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">setDualPointCalibration</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">3.8</span><span class="p">,</span> <span class="mf">7.2</span><span class="p">);</span>
</code></pre>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">refLow</code></td>
<td>the reference low point</td>
</tr>
</tbody></table>

<p><code class="prettyprint">refHigh</code> | the reference high point </p>

<p><code class="prettyprint">readLow</code> | the measured low point </p>

<p><code class="prettyprint">readHigh</code> | the measured high point</p>

<h2 id="getzero">getZero</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1ac78cb08029754d82fcf716fcd7bce8b7"><code class="prettyprint">getZero</code></a><code class="prettyprint">()</code>
</br></p>

<p>Retrieves the zero-point offset from the device.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">z</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">getZero</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: the probe&rsquo;s offset</p>

<h2 id="settempconstant">setTempConstant</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1ab450a122ac245219c13e0cbd8a0dc1c9"><code class="prettyprint">setTempConstant</code></a><code class="prettyprint">(byte b)</code>
</br></p>

<p>Configures device to use the provided temperature constant.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">setTempConstant</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span>
</code></pre>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">b</code></td>
<td>the temperature to use for compensation</td>
</tr>
</tbody></table>

<h2 id="gettempconstant">getTempConstant</h2>

<p><code class="prettyprint">public byte</code><a href="#classp_h___probe_1aaed3a5cdf163fde30aa5db1caa1ae7bf"><code class="prettyprint">getTempConstant</code></a><code class="prettyprint">()</code>
</br></p>

<p>Retrieves the temperature constant.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">byte</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">getTempConstant</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: the temperature to used for compensation</p>

<h2 id="usetemperaturecompensation">useTemperatureCompensation</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1ad6ca918fbdd20a1120e48abba8273c24"><code class="prettyprint">useTemperatureCompensation</code></a><code class="prettyprint">(bool b)</code>
</br></p>

<p>Configures device to use temperature compensation or not.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">useTemperatureCompensation</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</code></pre>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">b</code></td>
<td>true for false</td>
</tr>
</tbody></table>

<h2 id="usingtemperaturecompensation">usingTemperatureCompensation</h2>

<p><code class="prettyprint">public bool</code><a href="#classp_h___probe_1a48c8dfebf7ad6980678a4ba724be404f"><code class="prettyprint">usingTemperatureCompensation</code></a><code class="prettyprint">()</code>
</br></p>

<p>Determines if temperature compensation is being used.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">bool</span> <span class="n">usingTemp</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">usingTemperatureCompensation</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: true if using compensation, false otherwise</p>

<h2 id="usedualpoint">useDualPoint</h2>

<p><code class="prettyprint">public void</code><a href="#classp_h___probe_1a4c7b5ffef3255ec1dca3aa70de6f6ede"><code class="prettyprint">useDualPoint</code></a><code class="prettyprint">(bool b)</code>
</br></p>

<p>Configures device to use dual-point calibration.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH</span><span class="p">.</span><span class="n">useDualPoint</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</code></pre>
<table><thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">b</code></td>
<td>true or false</td>
</tr>
</tbody></table>

<h2 id="usingdualpoint">usingDualPoint</h2>

<p><code class="prettyprint">public bool</code><a href="#classp_h___probe_1a79593e970c53966f7d20aa7f4843d741"><code class="prettyprint">usingDualPoint</code></a><code class="prettyprint">()</code>
</br></p>

<p>Determines if dual point calibration is being used.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">bool</span> <span class="n">usingTemp</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">usingDualPoint</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: true if using compensation, false otherwise</p>

<h2 id="getcalibratehigh">getCalibrateHigh</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1ad5a4a26a4db78106103f27543469ffc7"><code class="prettyprint">getCalibrateHigh</code></a><code class="prettyprint">()</code>
</br></p>

<p>Retrieves the dual-point calibration high value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">calHigh</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">getCalibrateHigh</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: the dual-point calibration high value</p>

<h2 id="getcalibratelow">getCalibrateLow</h2>

<p><code class="prettyprint">public float</code><a href="#classp_h___probe_1a37d45eddc944e7cc4068d608c3d98db2"><code class="prettyprint">getCalibrateLow</code></a><code class="prettyprint">()</code>
</br></p>

<p>Retrieves the dual-point calibration low value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">calLow</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">getCalibrateLow</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: the dual-point calibration low value</p>

<h2 id="getversion">getVersion</h2>

<p><code class="prettyprint">public byte</code><a href="#classp_h___probe_1a3e7609cfcae3bd102c2be8fcbb00296a"><code class="prettyprint">getVersion</code></a><code class="prettyprint">()</code>
</br></p>

<p>Retrieves the firmware version of the device.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">byte</span> <span class="n">version</span> <span class="o">=</span> <span class="n">pH</span><span class="p">.</span><span class="n">getVersion</span><span class="p">();</span>
</code></pre>
<p><strong>Returns</strong>: version of firmware</p>

<p>Generated by <a href="https://sourcey.com/moxygen">Moxygen</a></p>
