<h1 id="summary">Summary</h1>

<table><thead>
<tr>
<th>Members</th>
<th>Descriptions</th>
</tr>
</thead><tbody>
<tr>
<td><code class="prettyprint">define PH_PROBE</code></td>
<td>pH probe I2C address</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_MEASURE_PH</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_MEASURE_TEMP</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_SINGLE</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_LOW</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_HIGH</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_VERSION_REGISTER</code></td>
<td>version</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_PH_REGISTER</code></td>
<td>pH</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_TEMP_REGISTER</code></td>
<td>temperature in C</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_SINGLE_REGISTER</code></td>
<td>zero offset</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_REFHIGH_REGISTER</code></td>
<td>reference high calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_REFLOW_REGISTER</code></td>
<td>reference low calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_READHIGH_REGISTER</code></td>
<td>reading high calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CALIBRATE_READLOW_REGISTER</code></td>
<td>reading low calibration</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_SOLUTION_REGISTER</code></td>
<td>reference pH solution</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_TEMP_COMPENSATION_REGISTER</code></td>
<td>temperature compensation constant</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_CONFIG_REGISTER</code></td>
<td>config register</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_TASK_REGISTER</code></td>
<td>task register</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_TEMP_MEASURE_TIME</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_PH_MEASURE_TIME</code></td>
<td></td>
</tr>
<tr>
<td><code class="prettyprint">define PH_DUALPOINT_CONFIG_BIT</code></td>
<td>dual point config bit</td>
</tr>
<tr>
<td><code class="prettyprint">define PH_TEMP_COMPENSATION_CONFIG_BIT</code></td>
<td>temperature compensation config bit</td>
</tr>
<tr>
<td><code class="prettyprint">class pH_Probe</code></td>
<td>pH Class</td>
</tr>
</tbody></table>

<h2 id="members">Members</h2>

<h4 id="define-ph_probe"><code class="prettyprint">define PH_PROBE</code></h4>

<p>pH probe I2C address</p>

<h4 id="define-ph_measure_ph"><code class="prettyprint">define PH_MEASURE_PH</code></h4>

<h4 id="define-ph_measure_temp"><code class="prettyprint">define PH_MEASURE_TEMP</code></h4>

<h4 id="define-ph_calibrate_single"><code class="prettyprint">define PH_CALIBRATE_SINGLE</code></h4>

<h4 id="define-ph_calibrate_low"><code class="prettyprint">define PH_CALIBRATE_LOW</code></h4>

<h4 id="define-ph_calibrate_high"><code class="prettyprint">define PH_CALIBRATE_HIGH</code></h4>

<h4 id="define-ph_version_register"><code class="prettyprint">define PH_VERSION_REGISTER</code></h4>

<p>version</p>

<h4 id="define-ph_ph_register"><code class="prettyprint">define PH_PH_REGISTER</code></h4>

<p>pH</p>

<h4 id="define-ph_temp_register"><code class="prettyprint">define PH_TEMP_REGISTER</code></h4>

<p>temperature in C</p>

<h4 id="define-ph_calibrate_single_register"><code class="prettyprint">define PH_CALIBRATE_SINGLE_REGISTER</code></h4>

<p>zero offset</p>

<h4 id="define-ph_calibrate_refhigh_register"><code class="prettyprint">define PH_CALIBRATE_REFHIGH_REGISTER</code></h4>

<p>reference high calibration</p>

<h4 id="define-ph_calibrate_reflow_register"><code class="prettyprint">define PH_CALIBRATE_REFLOW_REGISTER</code></h4>

<p>reference low calibration</p>

<h4 id="define-ph_calibrate_readhigh_register"><code class="prettyprint">define PH_CALIBRATE_READHIGH_REGISTER</code></h4>

<p>reading high calibration</p>

<h4 id="define-ph_calibrate_readlow_register"><code class="prettyprint">define PH_CALIBRATE_READLOW_REGISTER</code></h4>

<p>reading low calibration</p>

<h4 id="define-ph_solution_register"><code class="prettyprint">define PH_SOLUTION_REGISTER</code></h4>

<p>reference pH solution</p>

<h4 id="define-ph_temp_compensation_register"><code class="prettyprint">define PH_TEMP_COMPENSATION_REGISTER</code></h4>

<p>temperature compensation constant</p>

<h4 id="define-ph_config_register"><code class="prettyprint">define PH_CONFIG_REGISTER</code></h4>

<p>config register</p>

<h4 id="define-ph_task_register"><code class="prettyprint">define PH_TASK_REGISTER</code></h4>

<p>task register</p>

<h4 id="define-ph_temp_measure_time"><code class="prettyprint">define PH_TEMP_MEASURE_TIME</code></h4>

<h4 id="define-ph_ph_measure_time"><code class="prettyprint">define PH_PH_MEASURE_TIME</code></h4>

<h4 id="define-ph_dualpoint_config_bit"><code class="prettyprint">define PH_DUALPOINT_CONFIG_BIT</code></h4>

<p>dual point config bit</p>

<h4 id="define-ph_temp_compensation_config_bit"><code class="prettyprint">define PH_TEMP_COMPENSATION_CONFIG_BIT</code></h4>

<p>temperature compensation config bit</p>

<h2 id="public-float-ph"><code class="prettyprint">public float pH</code></h2>

<p>pH</p>

<h2 id="public-float-tempc"><code class="prettyprint">public float tempC</code></h2>

<p>Temperature in C</p>

<h2 id="public-float-tempf"><code class="prettyprint">public float tempF</code></h2>

<p>Temperature in F</p>

<h2 id="public-ph_probe"><code class="prettyprint">public  pH_Probe()</code></h2>

<p>Class constructor.</p>

<h2 id="public-ph_probe"><code class="prettyprint">public  ~pH_Probe()</code></h2>

<p>Class destructor.</p>

<h2 id="public-float-measureph"><code class="prettyprint">public float measurepH()</code></h2>

<p>Starts a pH measurement.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">measurepH</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>pH</p>

<h2 id="public-float-measuretemp"><code class="prettyprint">public float measureTemp()</code></h2>

<p>Starts a temperature measurement.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">measureTemp</span><span class="p">();</span>
</code></pre>
<p>tempC and tempF are updated </p>

<p>A value of -127 means the device is not connected. </p>

<h3 id="returns">Returns</h3>

<p>temperature in C</p>

<h2 id="public-void-calibratesingle-float-solutionph"><code class="prettyprint">public void calibrateSingle(float solutionpH)</code></h2>

<p>Calibrates the probe using a single point.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">calibrateSingle</span><span class="p">(</span><span class="mf">7.0</span><span class="p">);</span>
</code></pre>
<p>result will be saved in the device&rsquo;s EEPROM and used automatically thereafter</p>

<h2 id="public-void-calibrateprobelow-float-solutionph"><code class="prettyprint">public void calibrateProbeLow(float solutionpH)</code></h2>

<p>Calibrates the dual-point values for the low reading and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">calibrateProbeLow</span><span class="p">(</span><span class="mf">4.0</span><span class="p">);</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">solutionpH</code> the pH of the calibration solution</li>
</ul>

<h2 id="public-void-calibrateprobehigh-float-solutionph"><code class="prettyprint">public void calibrateProbeHigh(float solutionpH)</code></h2>

<p>Calibrates the dual-point values for the high reading and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">calibrateProbeHigh</span><span class="p">(</span><span class="mf">7.0</span><span class="p">);</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">solutionpH</code> the pH of the calibration solution</li>
</ul>

<h2 id="public-void-setdualpointcalibration-float-reflow-float-refhigh-float-readlow-float-readhigh"><code class="prettyprint">public void setDualPointCalibration(float refLow,float refHigh,float readLow,float readHigh)</code></h2>

<p>Sets all the values for dual point calibration and saves them in the devices&rsquo;s EEPROM.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">setDualPointCalibration</span><span class="p">(</span><span class="mf">4.0</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">3.8</span><span class="p">,</span> <span class="mf">7.2</span><span class="p">);</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><p><code class="prettyprint">refLow</code> the reference low point </p></li>
<li><p><code class="prettyprint">refHigh</code> the reference high point </p></li>
<li><p><code class="prettyprint">readLow</code> the measured low point </p></li>
<li><p><code class="prettyprint">readHigh</code> the measured high point</p></li>
</ul>

<h2 id="public-float-getcalibrateoffset"><code class="prettyprint">public float getCalibrateOffset()</code></h2>

<p>Retrieves the single-point offset from the device.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">z</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">getCalibrateOffset</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>the probe&rsquo;s offset</p>

<h2 id="public-void-settempconstant-byte-b"><code class="prettyprint">public void setTempConstant(byte b)</code></h2>

<p>Configures device to use the provided temperature constant.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">setTempConstant</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">b</code> the temperature to use for compensation</li>
</ul>

<h2 id="public-byte-gettempconstant"><code class="prettyprint">public byte getTempConstant()</code></h2>

<p>Retrieves the temperature constant.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">byte</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">getTempConstant</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>the temperature to used for compensation</p>

<h2 id="public-void-usetemperaturecompensation-bool-b"><code class="prettyprint">public void useTemperatureCompensation(bool b)</code></h2>

<p>Configures device to use temperature compensation or not.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">useTemperatureCompensation</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">b</code> true for false</li>
</ul>

<h2 id="public-bool-usingtemperaturecompensation"><code class="prettyprint">public bool usingTemperatureCompensation()</code></h2>

<p>Determines if temperature compensation is being used.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">bool</span> <span class="n">usingTemp</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">usingTemperatureCompensation</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>true if using compensation, false otherwise</p>

<h2 id="public-void-usedualpoint-bool-b"><code class="prettyprint">public void useDualPoint(bool b)</code></h2>

<p>Configures device to use dual-point calibration.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">pH_Probe</span><span class="o">::</span><span class="n">useDualPoint</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</code></pre>
<h3 id="parameters">Parameters</h3>

<ul>
<li><code class="prettyprint">b</code> true or false</li>
</ul>

<h2 id="public-bool-usingdualpoint"><code class="prettyprint">public bool usingDualPoint()</code></h2>

<p>Determines if dual point calibration is being used.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">bool</span> <span class="n">usingTemp</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">usingDualPoint</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>true if using compensation, false otherwise</p>

<h2 id="public-float-getcalibratehigh"><code class="prettyprint">public float getCalibrateHigh()</code></h2>

<p>Retrieves the dual-point calibration high value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">calHigh</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">getCalibrateHigh</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>the dual-point calibration high value</p>

<h2 id="public-float-getcalibratelow"><code class="prettyprint">public float getCalibrateLow()</code></h2>

<p>Retrieves the dual-point calibration low value.</p>
<pre class="highlight cpp tab-cpp"><code><span class="kt">float</span> <span class="n">calLow</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">getCalibrateLow</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>the dual-point calibration low value</p>

<h2 id="public-byte-getversion"><code class="prettyprint">public byte getVersion()</code></h2>

<p>Retrieves the firmware version of the device.</p>
<pre class="highlight cpp tab-cpp"><code><span class="n">byte</span> <span class="n">version</span> <span class="o">=</span> <span class="n">pH_Probe</span><span class="o">::</span><span class="n">getVersion</span><span class="p">();</span>
</code></pre>
<h3 id="returns">Returns</h3>

<p>version of firmware</p>

<h2 id="public-void-reset"><code class="prettyprint">public void reset()</code></h2>

<p>Resets all the stored calibration information.</p>

<p>Generated by <a href="https://sourcey.com/moxygen">Moxygen</a></p>
